spring:
  application:
    name: streaming-catalog-service
  datasource:
    url: jdbc:postgresql://localhost:5433/streaming_platform_db
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver


  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect

  graphql:
    path: /graphql
    graphiql:
      enabled: true
      path: /graphiql
    schema:
      locations: classpath:/schema/**
      printer:
        enabled: true
    cors:
      allowed-origins: "*"
      allowed-methods: GET,POST

  docker:
    compose:
      enabled: false
  main:
    allow-bean-definition-overriding: true
  security:
    user:
          name: admin
          password: admin

server:
  port: 8082

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui


# Application specific configuration
app:
  use-resolvers: false  # Set to true if you want to use resolver classes instead of controllers
  jwt:
    secret: ${JWT_SECRET:verySecureSecretKeyThatShouldBeChangedInProduction}
    expiration: 86400000  # 24 hours in milliseconds
  external-api:
    movie-info-url: ${MOVIE_INFO_API_URL:https://api.example.com/movies}
    timeout: 3000  # 3 seconds

# Resilience4j configuration
resilience4j:
  circuitbreaker:
    instances:
      externalMovieInfo:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
  retry:
    instances:
      externalMovieInfo:
        maxAttempts: 3
        waitDuration: 500ms
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  timelimiter:
    instances:
      externalMovieInfo:
        timeoutDuration: 5s
        cancelRunningFuture: true
  bulkhead:
    instances:
      externalMovieInfo:
        maxConcurrentCalls: 10
        maxWaitDuration: 1s

# Actuator configuration for monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers
  endpoint:
    health:
      show-details: when_authorized
  metrics:
    export:
      prometheus:
        enabled: true
  info:
    git:
      mode: full

# Distributed tracing configuration
spring:
  zipkin:
    base-url: http://zipkin:9411
    enabled: true
    service:
      name: streaming-catalog-service
  sleuth:
    sampler:
      probability: 1.0
    web:
      client:
        enabled: true

# External services configuration
external-services:
  recommendation-service:
    url: http://localhost:8083/api/v1
    timeout: 5000