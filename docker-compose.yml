services:
  postgres:
    image: postgres:15-alpine
    container_name: streaming-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"  # PostgreSQL exposed on 5433 for local connections
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      timeout: 5s
    command: |
      postgres -c max_connections=200 -c shared_buffers=256MB
      -c 'create database streaming_platform_db;'
      -c 'create database recommendation_db;'

  catalog-service:
    build:
      context: ./streaming-catalog-service
      dockerfile: Dockerfile
    container_name: streaming-catalog-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8082:8082"
    networks:
      - app-network
    environment:
      SPRING_PROFILES_ACTIVE: docker  # Enables 'application-docker.yml' inside Docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/streaming_platform_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect

  recommendation-service:
    build:
      context: ./recommendation-service
      dockerfile: Dockerfile
    container_name: streaming-recommendation-service
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8083:8083"
    networks:
      - app-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/recommendation_db
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      EXTERNAL_SERVICES_CATALOG_SERVICE_URL: http://catalog-service:8082/api/v1

  redis:
    image: redis:7-alpine
    container_name: streaming-redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
